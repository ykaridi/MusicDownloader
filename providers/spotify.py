from typing import Tuple, Optional, Union, Dict

import requests

from core import SongInformationProvider, SongInformation, AlbumInformationProvider, PNGSongImage, JPEGSongImage
from config import SPOTIPY

API = SPOTIPY.api
FEATURES = ['danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness',
            'liveness', 'valence', 'tempo']


class SpotifyProvider(SongInformationProvider, AlbumInformationProvider):
    """
    Song and Album information providers from Spotify
    """

    def _search(self, query_type: str, limit: int = 10, **query: Optional[str]) -> Dict:
        """Perform a Spotify query"""
        return API.search(" ".join("%s:%s" % (k, v) for k, v in query.items() if v is not None), type=query_type,
                          limit=limit)[query_type + "s"]['items']

    @staticmethod
    def _fetch_image(url: str) -> Optional[Union[PNGSongImage, JPEGSongImage]]:
        """Fetch an image from Spotify, assumes payload is either PNG or JPEG"""
        response = requests.get(url)
        if response.headers['Content-Type'] == 'image/png':
            return PNGSongImage(response.content)
        elif response.headers['Content-Type'] == 'image/jpeg':
            return JPEGSongImage(response.content)

        return None

    @staticmethod
    def _parse_track(obj: Dict, add_features: bool = True) -> SongInformation:
        """Parse a track object generated by the Spotify API"""
        def _fetch_features(track_id: str) -> Dict[str, float]:
            feature_dict = API.audio_features([track_id])[0]
            return {k: v for k, v in feature_dict.items() if k in FEATURES}

        track_id: str = obj.get('id')

        name: str = obj.get('name', None)
        album: str = obj.get('album', {}).get('name', None)

        _release_date: str = obj.get('album', {}).get('release_date', None)
        year: int = int(_release_date.split("-")[0]) if _release_date is not None else None

        _track_number: str = obj.get('track_number', None)
        track_number: int = int(_track_number) if _track_number is not None else None

        total_tracks: int = obj.get('album', {}).get('total_tracks', 0)

        _artists: Tuple[str, ...] = tuple(art['name'] for art in obj.get('artists', {}))
        artists: Tuple[str, ...] = _artists if len(_artists) > 0 else None

        links: Dict[str, str] = obj.get('external_urls', None)

        image_url: str = obj.get('album', {}).get('images', [{}])[0].get('url', None)
        image: Optional[Union[PNGSongImage, JPEGSongImage]] = SpotifyProvider._fetch_image(image_url) \
            if image_url is not None else None

        _additional_information = _fetch_features(track_id) if add_features else {}
        additional_information = "\n".join("%s %f" % (k, v) for k, v in _additional_information.items())

        return SongInformation(name, album, (track_number, total_tracks), artists, image, year, links=links,
                               additional_information=additional_information)

    def _search_track(self, track: Optional[str] = None, album: Optional[str] = None, artist: Optional[str] = None)\
            -> Tuple[SongInformation, ...]:
        """Search for a track given track name, (optional) album name and (optional) artist"""
        def _inner():
            for result in self._search(query_type="track", track=track, album=album, artist=artist):
                yield self._parse_track(result)

        return tuple(_inner())

    def _search_album_songs(self, album: Optional[str] = None, artist: Optional[str] = None) ->\
            Tuple[Tuple[str, Tuple[SongInformation, ...]], ...]:
        """Search for an album given album name and artist. Returns a list of (album_name, songs)"""
        def _inner():
            for result in self._search(query_type="album", album=album, artist=artist):
                album_id: str = result['id']
                album_name: str = result['name']

                image_url: str = result.get('images', [{}])[0].get('url', None)
                image: Optional[Union[PNGSongImage, JPEGSongImage]] = SpotifyProvider._fetch_image(image_url) \
                    if image_url is not None else None

                album_result = API.album_tracks(album_id)
                songs = []
                while album_result is not None:
                    for song_result in album_result['items']:
                        songs.append(self._parse_track(song_result).altered(album=album_name, cover_image=image))
                    album_result = API.next(album_result['next']) if album_result['next'] else None

                yield album_name, tuple(songs)

        return tuple(_inner())

    def search_song(self, song: str, album: str = None, artist: str = None) -> SongInformation:
        results = self._search_track(song, album, artist)
        if len(results) == 0:
            raise ValueError("Couldn't find song on Spotify")
        return results[0]

    def search_album(self, album: str, artist: str = None) -> Tuple[str, Tuple[SongInformation, ...]]:
        results = self._search_album_songs(album, artist)
        if len(results) == 0:
            raise ValueError("Couldn't find album on Spotify")
        return results[0]
